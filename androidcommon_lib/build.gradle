/**************************************************************************************************
                                        GRADLE CONFIG
 *************************************************************************************************/

if ((new File(gradle.local)).exists()) {
    apply from: gradle.local
} else {
    apply from: gradle.remote
}

libraryScripts.each {
    apply from: it
}

apply plugin: 'com.android.library'

group = groupId

android {
  
    // The following are set in the common.gradle file
    compileSdkVersion(compileVersion)
    buildToolsVersion(buildTools)

    defaultConfig {
        minSdkVersion(minVersion)
        targetSdkVersion(targetVersion)
        versionCode(releaseVersionCode)
        versionName(versionCodeName)
    }

	    // set by command line arguments
    publishNonDefault(gradle.ext.odkPublishConfig.toBoolean())
    defaultPublishConfig(gradle.ext.odkDefaultPublishConfig)
	
    productFlavors {
        demo {
        }

        master {
        }

        snapshot {
        }

        uitest {
        }
    }

    buildTypes {
        release {
            minifyEnabled(minify)
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
        debug {
            debuggable(true)
            testCoverageEnabled(testCoverage) // Allows AndroidTest JaCoCo reports to be generated
        }
    }

    packagingOptions { // Pick first occurrence of any files that cause conflicts, as defined in common.gradle
        packageList.each {
            pickFirst it
        }
    }

    compileOptions {
        sourceCompatibility javaVersion
        targetCompatibility javaVersion
    }

    variantFilter { variant ->
        def names = variant.flavors*.name
        if (gradle.ext.odkPublishConfig) {
            if (names.contains(gradle.ext.odkPublishConfigName)) {
                variant.setIgnore(false)
            } else {
                variant.setIgnore(true)
            }
        }
    }
}

configurations.all {
  resolutionStrategy {
      cacheDynamicVersionsFor(0, 'seconds')
      cacheChangingModulesFor(0, 'seconds')
  }
}

allprojects {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:deprecation" << "-Xlint:unchecked"
    }
}

dependencies {
    compile fileTree(include: '*.jar', dir: 'libs')

    if (libraryProjectPath.exists() && gradle.useLocal) { // Local project is favoured
        compile project(libraryProjectName)
    } else {
        demoCompile(group: groupId, name: libraryDemoArtifactName, classifier: demoRelease,
                    version: latestVersion, ext: 'aar')
        masterCompile(group: groupId, name: libraryMasterArtifactName, classifier: masterRelease,
                      version: masterArtifactVersion, ext: 'aar')
        snapshotCompile(group: groupId, name: librarySnapshotArtifactName,
                classifier: snapshotRelease, version: latestVersion, ext: 'aar')
        uitestCompile(group: groupId, name: librarySnapshotArtifactName,
                      classifier: snapshotRelease, version: latestVersion, ext: 'aar')
    }

    compile 'com.google.android.gms:play-services:' + gpsVersion
    compile 'com.android.support:support-annotations:23.1.0'

    // Testing dependencies
    testCompile 'junit:junit:4.12'
}
